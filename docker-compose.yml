services:

  config-server:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    container_name: config-server
    build:
      context: .
      dockerfile: services/config-server/Dockerfile
    ports:
      - "8888:8888"
    networks:
      - net

  kafka-server:
    container_name: kafka-server
    image: bitnami/kafka:latest
    ports:
      - "8889:8889"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:8889,CONTROLLER://:8890
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:8889
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-server:8890
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - ./infrastructure/scripts:/scripts
    networks:
      - net

  eureka-server:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    container_name: eureka-server
    build:
      context: .
      dockerfile: services/eureka-server/Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - net

  gateway-service:
    container_name: gateway-service
    build:
      context: .
      dockerfile: services/gateway-service/Dockerfile
    ports:
      - "8090:8090"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - net

  document-service:
    container_name: document-service
    build:
      context: .
      dockerfile: services/document-service/Dockerfile
    ports:
      - "8091:8091"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-database:5432/parse_ai_db
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka-server:
        condition: service_started
    networks:
      - net

  storage-service:
    container_name: storage-service
    build:
      context: .
      dockerfile: services/storage-service/Dockerfile
    ports:
      - "8092:8092"
    environment:
      CLOUDINARY_NAME: ${CLOUDINARY_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - net

  postgres-database:
    container_name: postgres-database
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: parse_ai_db
    ports:
      - "5432:5432"
    networks:
      - net

networks:
  net:
    driver: bridge
